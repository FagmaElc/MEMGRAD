from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from game import GameManager
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InputMediaPhoto
import asyncio
from datetime import datetime
from aiogram.types.message import Message as AioMessage
from aiogram.types import Chat



router = Router()
games = GameManager()

@router.message(Command("startgame"))
async def start_game(message: Message):
    chat_id = message.chat.id
    code = games.create_game(chat_id, message.from_user)
    await message.answer(f"üéÆ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: <code>{code}</code>\n–ò–≥—Ä–æ–∫–∏, –≤–≤–µ–¥–∏—Ç–µ /join {code} —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")

@router.message(Command("join"))
async def join_game(message: Message):
    try:
        code = message.text.split()[1]
    except IndexError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: /join ABC123")
        return

    success = games.join_game(code, message.from_user)
    if success:
        game = games.games.get(code)
        host_id = game.host_id
        host_name = game.players[host_id]["user"].full_name



        player_list = "\n".join([
            ("üëë " if uid == host_id else "‚Ä¢ ") + data["user"].full_name
            for uid, data in game.players.items()
        ])

        await message.answer(
            f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!\n\n"
            f"<b>–•–æ—Å—Ç:</b> {host_name}\n"
            f"<b>–ò–≥—Ä–æ–∫–∏:</b>\n{player_list}"
        )
    else:
        await message.answer("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –≤—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å.")

# ‚úÖ –≠–¢–û –í–ê–ñ–ù–û: –¥–æ–±–∞–≤—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
def register_handlers(dp):
    dp.include_router(router)

@router.message(Command("deal"))
async def deal_memes(message: Message):
    game = games.get_game_by_host(message.from_user.id)
    if not game:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    if game.started:
        await message.answer("‚ö†Ô∏è –ú–µ–º—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã!")
        return

    game.deal_memes()
    game.started = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Ç—É–∞—Ü–∏—é
    situation = game.pick_situation()
    if not situation:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π!")
        return
    await message.bot.send_message(game.chat_id, f"üì¢ –ü–µ—Ä–≤–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:\n\n<b>{situation}</b>")

    # –†–∞–∑–¥–∞—ë–º –º–µ–º—ã
    for player_id, data in game.players.items():
        user = data["user"]
        memes = data["memes"]

        # Debug: —Å–æ–æ–±—â–∏–º, —á—Ç–æ –º–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ç–æ–≤—ã
        print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–º–æ–≤ {len(memes)} —à—Ç. –∏–≥—Ä–æ–∫—É {user.full_name} ({user.id})")

        for idx, meme_url in enumerate(memes):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –º–µ–º ({idx+1})",
                        callback_data=f"select_{idx}"
                    )]
                ]
            )
            try:
                await message.bot.send_photo(
                    chat_id=user.id,
                    photo=meme_url,
                    caption=f"–ú–µ–º {idx+1}",
                    reply_markup=keyboard
                )
            except Exception as e:
                # Debug —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.full_name} ({user.id}): {e}")
                await message.answer(
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –∏–≥—Ä–æ–∫—É {user.full_name}. "
                    f"–û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –õ–°."
                )
                # –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–º

    host_name = game.players[game.host_id]["user"].full_name
    player_list = "\n".join([
        ("üïπ " if uid == game.host_id else "‚Ä¢ ") + data["user"].full_name
        for uid, data in game.players.items()
    ])
    await message.answer(
        f"üì§ –ú–µ–º—ã –±—ã–ª–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –∏–≥—Ä–æ–∫–∞–º!\n\n"
        f"<b>–•–æ—Å—Ç:</b> {host_name}\n"
        f"<b>–ò–≥—Ä–æ–∫–∏:</b>\n{player_list}"
    )

async def send_memes(game, bot):
    for player_id, data in game.players.items():
        user = data["user"]
        memes = data["memes"]

        # üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°
        old_messages = data.get("meme_messages", [])
        for msg_id in old_messages:
            try:
                await bot.delete_message(chat_id=user.id, message_id=msg_id)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É {user.full_name}: {e}")
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        data["meme_messages"] = []

        # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –º–µ–º–æ–≤
        for idx, meme_url in enumerate(memes):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[ 
                    InlineKeyboardButton(
                        text=f"–í—ã–±—Ä–∞—Ç—å –º–µ–º {idx + 1}",
                        callback_data=f"select_{idx}"
                    )
                ]]
            )
            try:
                msg = await bot.send_photo(
                    chat_id=user.id,
                    photo=meme_url,
                    caption=f"–ú–µ–º {idx + 1}",
                    reply_markup=keyboard
                )
                # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ
                data["meme_messages"].append(msg.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–º–æ–≤ {user.full_name} ({user.id}): {e}")
                await bot.send_message(
                    chat_id=game.chat_id,
                    text=f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –∏–≥—Ä–æ–∫—É {user.full_name}. "
                         f"–û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –õ–°."
                )


async def send_next_round(bot, game):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –º–µ–º—ã
    players_with_memes = [
        player for player in game.players.values() if player["memes"]
    ]

    if not players_with_memes:
        await end_game(bot, game)
        return

    situation = game.pick_situation()
    await bot.send_message(game.chat_id, f"üì¢ –°–∏—Ç—É–∞—Ü–∏—è:\n\n<b>{situation}</b>")

    for player_id, data in game.players.items():
        user = data["user"]
        memes = data["memes"]

        for idx, meme_url in enumerate(memes):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–í—ã–±—Ä–∞—Ç—å –º–µ–º {idx+1}",
                        callback_data=f"select_{idx}"
                    )]
                ]
            )
            try:
                await bot.send_photo(
                    chat_id=user.id,
                    photo=meme_url,
                    caption=f"–ú–µ–º {idx+1}",
                    reply_markup=keyboard
                )
            except Exception:
                await bot.send_message(
                    game.chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –∏–≥—Ä–æ–∫—É {user.full_name}. "
                    f"–û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –õ–°."
                )


@router.message(Command("nextround"))
async def next_round(message: Message):
    game = games.get_game_by_host(getattr(message.from_user, "id", 0))
    if not game:
        await message.answer("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    await send_next_round(message.bot, game)

        
@router.callback_query(lambda c: c.data and c.data.startswith("vote_"))
async def process_vote(callback: CallbackQuery):
    user_id = callback.from_user.id
    game = games.get_game_by_player(user_id)

    if not game:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
        return

    vote_idx = int(callback.data.split("_")[1])

    author_id = game.selected_for_vote[vote_idx][0]
    if user_id == author_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–≤–æ–π –º–µ–º.")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for voters in game.votes.values():
        voters.discard(user_id)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å
    if vote_idx not in game.votes:
        game.votes[vote_idx] = set()
    game.votes[vote_idx].add(user_id)

    await callback.answer(f"–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –º–µ–º #{vote_idx + 1}.")

    # –ö–æ–º—É –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å ‚Äî –≤—Å–µ, –∫—Ä–æ–º–µ –∞–≤—Ç–æ—Ä–æ–≤ –º–µ–º–æ–≤
    authors = {author_id for author_id, _ in game.selected_for_vote}
    voters_needed = set(game.players.keys()) - authors

    # –ö—Ç–æ —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
    voters_who_voted = set()
    for voters in game.votes.values():
        voters_who_voted.update(voters)

    print(f"–ù—É–∂–Ω—ã –≥–æ–ª–æ—Å–∞ –æ—Ç: {voters_needed}")
    print(f"–£–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {voters_who_voted}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω
    if voters_needed and voters_needed.issubset(voters_who_voted):
        # –í—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
        await end_vote(callback.message, bot=callback.bot, game=game)

@router.callback_query(lambda c: c.data and c.data.startswith("select_"))
async def process_selection(callback: CallbackQuery):
    user_id = callback.from_user.id
    selected_idx = int(callback.data.split("_")[1])

    game = games.get_game_by_player(user_id)
    if not game:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
        return

    player_data = game.players.get(user_id)
    if player_data is None:
        await callback.answer("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã.")
        return

    player_data["selected_meme"] = selected_idx
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–º #{selected_idx + 1}")

    if game.all_selected():
        selected_memes = []
        game.selected_for_vote = []
        game.reset_votes()
        game.voting_message_ids = []

        for player_id, player in game.players.items():
            idx = player["selected_meme"]
            if idx is not None and 0 <= idx < len(player["memes"]):
                meme_url = player["memes"][idx]
                selected_memes.append((player_id, meme_url))
                game.selected_for_vote.append((player_id, meme_url))
                del player["memes"][idx]
                player["selected_meme"] = None

        for i, (author_id, meme_url) in enumerate(selected_memes):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"–ì–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ –º–µ–º #{i+1}", callback_data=f"vote_{i}")]
            ])
            msg = await callback.bot.send_photo(
                chat_id=game.chat_id,
                photo=meme_url,
                reply_markup=keyboard,
                caption=f"–ú–µ–º #{i+1} (–∞–≤—Ç–æ—Ä: {game.players[author_id]['user'].full_name})"
            )
            game.voting_message_ids.append(msg.message_id)

        await callback.bot.send_message(game.chat_id, "üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å! –£ –≤–∞—Å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å.")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
        async def vote_timer():
            await asyncio.sleep(30)
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await end_vote(callback.message, bot=callback.bot, game=game)
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            await next_round_auto(callback.bot, game)

        asyncio.create_task(vote_timer())

async def next_round_auto(bot, game):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –º–µ–º—ã
    players_with_memes = [
        player for player in game.players.values() if player["memes"]
    ]

    if not players_with_memes:
        await end_game(bot, game)
        return

    situation = game.pick_situation()
    await bot.send_message(game.chat_id, f"üì¢ –°–ª–µ–¥—É—é—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è:\n\n<b>{situation}</b>")

    for player_id, data in game.players.items():
        user = data["user"]
        memes = data["memes"]

        for idx, meme_url in enumerate(memes):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"–í—ã–±—Ä–∞—Ç—å –º–µ–º {idx+1}",
                        callback_data=f"select_{idx}"
                    )]
                ]
            )
            try:
                await bot.send_photo(
                    chat_id=user.id,
                    photo=meme_url,
                    caption=f"–ú–µ–º {idx+1}",
                    reply_markup=keyboard
                )
            except Exception:
                await bot.send_message(game.chat_id,
                    f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º –∏–≥—Ä–æ–∫—É {user.full_name}. "
                    f"–û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ –õ–°.")





async def end_vote(message: Message, bot=None, game=None):
    if bot is None:
        bot = message.bot

    if game is None:
        game = games.get_game_by_host(message.from_user.id)

    if not game:
        await bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã.")
        return

    if not game.selected_for_vote:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å.")
        return

    votes_count = {idx: len(voters) for idx, voters in game.votes.items()}
    if not votes_count:
        await bot.send_message(message.chat.id, "‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤ –Ω–µ—Ç.")
        return

    max_votes = max(votes_count.values())
    winners = [idx for idx, cnt in votes_count.items() if cnt == max_votes]

    for winner_idx in winners:
        author_id = game.selected_for_vote[winner_idx][0]
        game.scores[author_id] += 1

    result_text = "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n"
    for idx, (author_id, _) in enumerate(game.selected_for_vote):
        count = votes_count.get(idx, 0)
        name = game.players[author_id]["user"].full_name
        score = game.scores.get(author_id, 0)
        result_text += f"–ú–µ–º #{idx+1} –æ—Ç {name}: {count} –≥–æ–ª–æ—Å–æ–≤, –≤—Å–µ–≥–æ –æ—á–∫–æ–≤: {score}\n"

    await bot.send_message(game.chat_id, result_text)

    game.reset_votes()
    game.selected_for_vote = []

async def end_game(bot, game):
    await bot.send_message(game.chat_id, "üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏...")

    # –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤
    score_data = [(uid, score) for uid, score in game.scores.items()]
    score_data.sort(key=lambda x: x[1], reverse=True)

    if not score_data:
        await bot.send_message(game.chat_id, "üò¢ –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –æ—á–∫–æ–≤.")
        return

    max_score = score_data[0][1]
    winners = [uid for uid, score in score_data if score == max_score]

    if len(winners) == 1:
        winner_name = game.players[winners[0]]["user"].full_name
        await bot.send_message(game.chat_id, f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name}</b> —Å {max_score} –æ—á–∫–∞–º–∏!")
    else:
        names = [game.players[uid]["user"].full_name for uid in winners]
        name_list = ", ".join(names)
        await bot.send_message(game.chat_id, f"ü§ù –ù–∏—á—å—è –º–µ–∂–¥—É: <b>{name_list}</b>\n–ö–∞–∂–¥—ã–π –Ω–∞–±—Ä–∞–ª {max_score} –æ—á–∫–æ–≤!")

    # –ú–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏–≥—Ä—É –∏–∑ –ø–∞–º—è—Ç–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    del games.games[game.code]

